## 1. まえがき
### 1.1. opensource COBOLとは
## 1.2. COBOL/opensource COBOLの重要機能
### 1.2.1. COBOLプログラムの構文
### 1.2.2. コピーブック
### 1.2.3. 構造化データ
### 1.2.4. ファイル
### 1.2.5. 表操作
### 1.2.6. データの並び替えと結合
### 1.2.7. 文字列操作
### 1.2.8. テキストユーザインターフェース(TUI)機能
## 1.3. 構文規則
## 1.4. ソースコードの形式
## 1.5. カンマ/セミコロンの使い方
## 1.6. COPY文の使い方
## 1.7. 定数の使い方
### 1.7.1. 数字定数
### 1.7.2. 英数字定数
### 1.7.3. 日本語定数
## 1.8. 表意定数の使い方
## 1.9. ユーザ定義名
## 1.10. LENGTH OFの使い方
# 2. opensource COBOLのプログラム形式
## 2.1. ネストされたユーザプログラム
## 2.2. ネストされたユーザ定義関数
# 3. 見出し部
# 4. 環境部
## 4.1. 構成節
### 4.1.1. 翻訳用計算機段落
### 4.1.2. 実行用計算機段落
### 4.1.3. リポジトリ段落
### 4.1.4. 特殊名段落
## 4.2. 入出力節
### 4.2.1. ファイル管理段落
#### 4.2.1.1. 順編成ファイル
#### 4.2.1.2. 相対編成ファイル
#### 4.2.1.3. 索引編成ファイル
### 4.2.2. 入出力管理段落
# 5. データ部
## 5.1. ファイル記述
## 5.2. 整列用記述
## 5.3. データ記述の形式
## 5.4. 条件名
## 5.5. 定数記述
## 5.6. 画面記述
# 6. 手続き部
## 6.1. 構成要素
### 6.1.1. 表の参照
### 6.1.2. データ名の修飾
### 6.1.3. 部分参照
### 6.1.4. 式
#### 6.1.4.1. 算術式
#### 6.1.4.2. 条件式
##### 6.1.4.2.1. 条件名(レベル88項目)
##### 6.1.4.2.2. 字類条件
##### 6.1.4.2.3. 正負条件
##### 6.1.4.2.4. スイッチ状態条件
##### 6.1.4.2.5. 比較条件
##### 6.1.4.2.6. 組み合わせ条件
##### 6.1.4.2.7. 否定条件
### 6.1.5. ピリオド(.)
### 6.1.6. 動詞/END-動詞
### 6.1.7. 特殊レジスタ
### 6.1.8. ファイルへの同時アクセス制御
#### 6.1.8.1. ファイル共有
#### 6.1.8.2. レコードロック
## 6.2. 記述形式
## 6.3. 宣言の記述形式
## 6.4. ACCEPT
### 6.4.1. ACCEPT文の書き方1 ― コンソールからの読み取り
### 6.4.2. ACCEPT文の書き方2 ― コマンドライン引数の取得
### 6.4.3. ACCEPT文の書き方3 ― 環境変数値の取得
### 6.4.4. ACCEPT文の書き方4 ― 画面データの取得
### 6.4.5. ACCEPT文の書き方5 ― 日付/時刻の取得
### 6.4.6. ACCEPT文の書き方6 ― 画面サイズデータの取得
### 6.4.7. ACCEPT文の例外処理
## 6.5. ADD
### 6.5.1. ADD文の書き方1 ― ADD TO
### 6.5.2. ADD文の書き方2 ― ADD GIVING
### 6.5.3. ADD文の書き方3 ― ADD CORRESPONDING
## 6.6. ALLOCATE
## 6.7. CALL
## 6.8. CANCEL
### 6.8.1. CANCEL文の書き方1 ― CANCEL
### 6.8.2. CANCEL文の書き方2 ― CANCEL ALL
## 6.9. CLOSE
## 6.10. COMMIT
## 6.11. COMPUTE
## 6.12. CONTINUE
## 6.13. DELETE
### 6.13.1. DELETE文の書き方1 ― DELETE
### 6.13.2. DELETE文の書き方2 ― DELETE FILE
## 6.14. DISPLAY
### 6.14.1. DISPLAY文の書き方1 ― UPON CONSOLE
### 6.14.2. DISPLAY文の書き方2 ― コマンドライン引数へのアクセス
### 6.14.3. DISPLAY文の書き方3 ― 環境変数へのアクセスまたは設定
### 6.14.4. DISPLAY文の書き方4 ― 画面データ
### 6.14.5. DISPLAY文の例外処理
## 6.15. DIVIDE
### 6.15.1. DIVIDE文の書き方1 ― DIVIDE INTO
### 6.15.2. DIVIDE文の書き方2 ― DIVIDE INTO GIVING
### 6.15.3. DIVIDE文の書き方3 ― DIVIDE BY GIVING
### 6.15.4. DIVIDE文の書き方4 ― DIVIDE INTO REMAINDER
### 6.15.5. DIVIDE文の書き方5 ― DIVIDE BY REMAINDER
## 6.16. ENTRY
## 6.17. EVALUATE
## 6.18. EXIT
## 6.19. FREE
## 6.20. GENERATE
## 6.21. GOBACK
## 6.22. GO TO
### 6.22.1. GO TO文の書き方1 ― GO TO
### 6.22.2. GO TO文の書き方2 ― GO TO DEPENDING ON
## 6.23. IF
## 6.24. INITIALIZE
## 6.25. INITIATE
## 6.26. INSPECT
## 6.27. MERGE
## 6.28. MOVE
### 6.28.1. MOVE文の書き方1 ― MOVE
### 6.28.2. MOVE文の書き方2 ― MOVE CORRESPONDING
## 6.29. MULTIPLY
### 6.29.1. MULTIPLY文の書き方1 ― MULTIPLY BY
### 6.29.2. MULTIPLY文の書き方2 ― MULTIPLY GIVING
## 6.30. NEXT SENTENCE
## 6.31. OPEN
## 6.32. PERFORM
### 6.32.1. PERFORM文の書き方1 ― 手続き型
### 6.32.2. PERFORM文の書き方2 ― インライン型
## 6.33. READ
### 6.33.1. READ文の書き方1 ― 順次読み取り
### 6.33.2. READ文の書き方2 ― ランダム読み取り
## 6.34. RELEASE
## 6.35. RETURN
## 6.36. REWRITE
## 6.37. ROLLBACK
## 6.38. SEARCH
### 6.38.1. SEARCH文の書き方1 ― 順次探索
### 6.38.2. SEARCH文の書き方2 ― 二分探索(SEARCH ALL)
## 6.39. SET
### 6.39.1. SET文の書き方1 ― 環境設定
### 6.39.2. SET文の書き方2 ― プログラムポインター設定
### 6.39.3. SET文の書き方3 ― アドレス設定
### 6.39.4. SET文の書き方4 ― インデックス設定
### 6.39.5. SET文の書き方5 ― UP/DOWN設定
### 6.39.6. SET文の書き方6 ― 条件名設定
### 6.39.7. SET文の書き方7 ― スイッチ設定
## 6.40. SORT
### 6.40.1. SORT文の書き方1 ― ファイルソート
### 6.40.2. SORT文の書き方2 ― テーブルソート
## 6.41. START
## 6.42. STOP
## 6.43. STRING
## 6.44. SUBTRACT
### 6.44.1. SUBTRACT文の書き方1 ― SUBTRACT FROM
### 6.44.2. SUBTRACT文の書き方2 ― SUBTRACT GIVING
### 6.44.3. SUBTRACT文の書き方3 ― SUBTRACT CORRESPONDING
## 6.45. SUPPRESS
## 6.46. TERMINATE
## 6.47. TRANSFORM
## 6.48. UNLOCK
## 6.49. UNSTRING
## 6.50. WRITE
# 7. 日本語の使用
## 7.1. 英数字項目の日本語
## 7.2. 日本語項目と表意定数
## 7.3. 各命令文と日本語の取扱い
### 7.3.1. MOVE文
### 7.3.2. ACCEPT/DISPLAY文
## 7.4. UTF-8の使用
# 8. opensource COBOLシステムインターフェース
## 8.1. opensource COBOLコンパイラの使い方(cobc)
### 8.1.1. 解説
### 8.1.2. コンパイルオプション
### 8.1.3. 実行可能プログラムのコンパイル
### 8.1.4. 動的にロード可能なサブプログラム
### 8.1.5. 静的サブルーチン
### 8.1.6. COBOLとCプログラムの結合
#### 8.1.6.1. opensource COBOLランタイムライブラリの要件
#### 8.1.6.2. opensource COBOLとCの文字列割り当ての違い
#### 8.1.6.3. Cデータ型とopensource COBOL USAGE句の一致
#### 8.1.6.4. opensource COBOLメインプログラムのCサブプログラム呼び出し
#### 8.1.6.5. Cメインプログラムのopensource COBOLサブプログラム呼び出し
### 8.1.7. 重要な環境変数
### 8.1.8. コンパイル時のコピーブックの検索
### 8.1.9. コンパイラ構成ファイルの使い方
## 8.2. opensource COBOLプログラムの実行
### 8.2.1. プログラムの直接実行
### 8.2.2. 「cobcrun」ユーティリティの使用
### 8.2.3. プログラムの引数
### 8.2.4. 重要な環境変数
## 8.3. 組み込みサブルーチン
### 8.3.1. 「名前による呼び出し」ルーチン
#### 8.3.1.1. CALL “C$CALLEDBY” USING *program-name GIVING status*
#### 8.3.1.2. CALL “C$CHDIR” USING *directory-path, result*
#### 8.3.1.3. CALL “C$COPY” USING src-file-path, dest-file-path, 0
#### 8.3.1.4. CALL “C$DELETE” USING *file-path*, 0
#### 8.3.1.5. CALL “C$FILEINFO” USING *file-path, file-info*
#### 8.3.1.6. CALL “C$JUSTIFY” USING data-item, “justification-type”
#### 8.3.1.7. CALL “C$LIST-DIRECTORY” USING *item-1, item-2, item-3*
#### 8.3.1.8. CALL “C$MAKEDIR” USING *dir-path*
#### 8.3.1.9. CALL “C$NARG” USING *arg-count-result*
#### 8.3.1.10. CALL “C$PARAMSIZE” USING *argument-number*
#### 8.3.1.11. CALL “C$SLEEP” USING *seconds-to-sleep*
#### 8.3.1.12. CALL “C$TOLOWER” USING *data-item*, BY VALUE *convert-length*
#### 8.3.1.13. CALL “C$TOUPPER” USING *data-item*, BY VALUE *convert-length*
#### 8.3.1.14. CALL “CBL_AND” USING *item-1, item-2*, BY VALUE *byte-length*
#### 8.3.1.15. CALL “CBL_CHANGE_DIR” USING *directory-path*
#### 8.3.1.16. CALL “CBL_CHECK_FILE_EXIST” USING *file-path, file-info*
#### 8.3.1.17. CALL “CBL_CHANGE_DIR” USING *directory-path*
#### 8.3.1.18. CALL “CBL_COPY_FILE” USING *src-file-path, dest-file-path*
#### 8.3.1.19. CALL “CBL_CREATE_DIR” USING *dir-path*
#### 8.3.1.20. CALL “CBL_CREATE_FILE” USING *file-path*, 2, 0, 0, *file-handle*
#### 8.3.1.21. CALL “CBL_DELETE_DIR” USING *dir-path*
#### 8.3.1.22. CALL “CBL_DELETE_FILE” USING *file-path*
#### 8.3.1.23. CALL “CBL_ERROR_PROC” USING *function, program-pointer*
#### 8.3.1.24. CALL “CBL_EXIT_PROC” USING *function, program-pointer*
#### 8.3.1.25. CALL “CBL_EQ” USING *item-1, item-2*, BY VALUE *byte-length*
#### 8.3.1.26. CALL “CBL_FLUSH_FILE” USING *file-handle*
#### 8.3.1.27. CALL “CBL_GET_CURRENT_DIR” USING BY VALUE 0, BY VALUE *length*, BY REFERENCE *buffer*
#### 8.3.1.28. CALL “CBL_IMP” USING *item-1, item-2*, BY VALUE *byte-length*
#### 8.3.1.29. CALL “CBL_NIMP” USING *item-1, item-2*, BY VALUE *byte-length*
#### 8.3.1.30. CALL “CBL_NOR” USING *item-1, item-2*, BY VALUE *byte-length*
#### 8.3.1.31. CALL “CBL_NOT” USING *item-1*, BY VALUE *byte-length*
#### 8.3.1.32. CALL “CBL_OC_KEISEN” USING *item-1*
#### 8.3.1.33. CALL “CBL_OC_NANOSLEEP” USING *nanoseconds-to-sleep*
#### 8.3.1.34. CALL “CBL_OPEN_FILE” *file-path, access-mode*, 0, 0, *handle*
#### 8.3.1.35. CALL “CBL_OR” USING *item-1, item-2*, BY VALUE *byte-length*
#### 8.3.1.36. CALL “CBL_READ_FILE” USING *handle, offset, nbytes, flag, buffer*
#### 8.3.1.37. CALL “CBL_RENAME_FILE” USING *old-file-path, new-file-path*
#### 8.3.1.38. CALL “CBL_TOLOWER” USING *data-item*, BY VALUE *convert-length*
#### 8.3.1.39. CALL “CBL_TOUPPER” USING *data-item*, BY VALUE *convert-length*
#### 8.3.1.40. CALL “CBL_WRITE_FILE” USING *handle, offset, nbytes, 0, buffer*
#### 8.3.1.41. CALL “CBL_XOR” USING *item-1, item-2*, BY VALUE *byte-length*
#### 8.3.1.42. CALL “SYSTEM” USING *command*
# 9. サンプルプログラム
## 9.1. FileStat-Msgs.cpy – ファイル状態コード
## 9.2. COBDUMP – 16進数/文字データダンプサブルーチン
# クレジット